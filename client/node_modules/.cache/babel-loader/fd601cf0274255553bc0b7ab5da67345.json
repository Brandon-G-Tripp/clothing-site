{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/brandontripp/Documents/Programming /ReactCourseAndrei/crown-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,SACGC,IADH,EAEGC,cAFH,EAGGC,yBAHH,EAIGC,cAJH,QAKO,+BALP;AAOA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAChD,MAAI;AACD,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACM,yBAAD,EAA4BG,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACI,aAAa,CAAC;AAAEW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACF,GAJD,CAIE,OAAOC,KAAP,EAAc;AACb,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACF;AACH;AAED,OAAO,UAAUC,gBAAV,GAA6B;AACjC,MAAI;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,eAAL,CAAqBb,cAArB,CAAvB;AACA,UAAMG,uBAAuB,CAACS,IAAD,CAA7B;AACF,GAHD,CAGE,OAAOF,KAAP,EAAc;AACb,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACF;AACH;AAED,OAAO,UAAUI,eAAV,CAA2B;AAACC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAV,CAA3B,EAA4D;AAChE,MAAI;AACD,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACmB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACF,GAHD,CAGE,OAAOF,KAAP,EAAc;AACb,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACF;AACH;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACpC,MAAI;AACD,UAAMf,QAAQ,GAAG,MAAMF,cAAc,EAArC;AACA,QAAI,CAACE,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACF,GAJD,CAIE,OAAMM,KAAN,EAAa;AACZ,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACF;AACH;AAED,OAAO,UAAUU,mBAAV,GAAgC;AACpC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACF;AAED,OAAO,UAAUW,kBAAV,GAA+B;AACnC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAsCT,eAAtC,CAAhB;AACF;AAED,OAAO,UAAUU,kBAAV,GAA+B;AACnC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAqCN,mBAArC,CAAhB;AACF;AAED,OAAO,UAAUO,SAAV,GAAsB;AAC1B,QAAMhC,GAAG,CAAC,CACPC,IAAI,CAACyB,mBAAD,CADG,EAEPzB,IAAI,CAAC2B,kBAAD,CAFG,CAAD,CAAT;AAIF","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport { signInSuccess, signInFailure } from './user.actions';\n\nimport { \n   auth, \n   googleProvider, \n   createUserProfileDocument,\n   getCurrentUser \n} from '../../firebase/firebase.utils';\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n   try {\n      const userRef = yield call(createUserProfileDocument, userAuth);\n      const userSnapshot = yield userRef.get();\n      yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}))\n   } catch (error) {\n      yield put(signInFailure(error));\n   }\n}\n\nexport function* signInWithGoogle() {\n   try {\n      const { user } = yield auth.signInWithPopup(googleProvider);\n      yield getSnapshotFromUserAuth(user);\n   } catch (error) {\n      yield put(signInFailure(error));\n   }\n}\n\nexport function* signInWithEmail( {payload: { email, password } }) {\n   try {\n      const { user } = yield auth.signInWithEmailAndPassword(email, password);\n      yield getSnapshotFromUserAuth(user);\n   } catch (error) {\n      yield put(signInFailure(error))\n   }\n}\n\nexport function* isUserAuthenticated() {\n   try {\n      const userAuth = yield getCurrentUser();\n      if (!userAuth) return;\n      yield getSnapshotFromUserAuth(userAuth);\n   } catch(error) {\n      yield put(signInFailure(error));\n   }\n}\n\nexport function* onGoogleSignInStart() {\n   yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n   yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onCheckUserSession() {\n   yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* userSagas() {\n   yield all([\n      call(onGoogleSignInStart), \n      call(onEmailSignInStart)\n   ]);\n}\n\n"]},"metadata":{},"sourceType":"module"}